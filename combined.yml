# Deployment for instance 1
apiVersion: apps/v1
kind: Deployment
metadata:
  name: go-web-app-instance1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: go-web-app1
      version: instance1
  template:
    metadata:
      labels:
        type: sharded
        app: go-web-app1
        version: instance1
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - go-web-app1
            topologyKey: "kubernetes.io/hostname"
      serviceAccountName: "go-web-app-sa"
      containers:
            - name: go-web-app1
              image: docker.io/pebcac/ocwebsvc:0.5
              ports:
              - containerPort: 8080
              env:
                - name: NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
                - name: HOSTNAME
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.name
                - name: NODE_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: spec.nodeName
                - name: POD_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.name
              resources:
                limits:
                  cpu: "1"
                  memory: "1Gi"
                requests:
                  cpu: "0.5"
                  memory: "512Mi"

---
# Service for instance 1
apiVersion: v1
kind: Service
metadata:
  name: gowebapp1
  labels:
    type: sharded
    app: go-web-app1
spec:
  selector:
    app: go-web-app1
    version: instance1
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080

---
# Deployment for instance 2
apiVersion: apps/v1
kind: Deployment
metadata:
  name: go-web-app-instance2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: go-web-app2
      version: instance2
  template:
    metadata:
      labels:
        type: sharded
        app: go-web-app2
        version: instance2
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - go-web-app2
            topologyKey: "kubernetes.io/hostname"
      serviceAccountName: "go-web-app-sa"
      containers:
            - name: go-web-app2
              image: docker.io/pebcac/ocwebsvc:0.5
              ports:
              - containerPort: 8080
              env:
                - name: NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
                - name: HOSTNAME
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.name
                - name: NODE_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: spec.nodeName
                - name: POD_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.name
              resources:
                limits:
                  cpu: "1"
                  memory: "1Gi"
                requests:
                  cpu: "0.5"
                  memory: "512Mi"

---
#Service for instance 2
apiVersion: v1
kind: Service
metadata:
  name: gowebapp2
  labels:
    type: sharded
    app: go-web-app2
spec:
  selector:
    app: go-web-app2
    version: instance2
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080

---
# Route for combined service
#apiVersion: route.openshift.io/v1
#kind: Route
#metadata:
#  annotations:
#    haproxy.router.openshift.io/disable_cookies: 'true'
#    haproxy.router.openshift.io/balance: 'roundrobin'
#  name: lb50
#  namespace: test
#spec:
#  host: lb50-test.apps.ocp.pebcac.org
#  to:
#    kind: Service
#    name: go-web-app1-service-instance1 # Default service
#    weight: 50
#  alternateBackends:
#    - kind: Service
#      name: go-web-app2-service-instance2
#      weight: 50
#  port:
#    targetPort: 8080
#  wildcardPolicy: None

---
#apiVersion: networking.k8s.io/v1
#kind: Ingress
#metadata:
#  name: shard-ingress
#  namespace: test
#  labels:
#    type: sharded
#  annotations:
#    haproxy.router.openshift.io/disable_cookies: 'true'
#    haproxy.router.openshift.io/balance: 'canary'
#spec:
#  rules:
#  - http:
#      paths:
#      - path: /
#        pathType: Prefix
#        backend:
#          service:
#            name: gowebapp1
#            port:
#              number: 80
#      - path: /
#        pathType: Prefix
#        backend:
#          service:
#            name: gowebapp2
#            port:
#              number: 80
#    canary:
#      weight: 50

---
#apiVersion: route.openshift.io/v1
#kind: Route
#metadata:
#  labels:
#    type: sharded 
#  name: lb50
#  namespace: test
#spec:
#  subdomain: lb50-test
#  tls:
#    termination: edge
#  to:
#    kind: Service
#    name: gowebapp1
#    weight: 50
#  alternateBackends:
#    - kind: Service
#      name: gowebapp2
#      weight: 50

---
#apiVersion: networking.k8s.io/v1
#kind: Ingress
#metadata:
#  name: shard-ingress
#  namespace: test
#  labels:
#    type: sharded
#  annotations:
#    haproxy.router.openshift.io/disable_cookies: 'true'
#    haproxy.router.openshift.io/balance: 'canary'
#spec:
#  domain: lb50-test.apps.ocp.pebcac.org
#  rules: 
#  - http:
#      paths:
#      - path: /
#        pathType: Prefix
#        backend:
#          service:
#            name: gowebapp1
#            port:
#              number: 80
#      - path: /
#        pathType: Prefix
#        backend:
#          service:
#            name: gowebapp2
#            port:
#              number: 80
#    canary:
#      weight: 50

---
apiVersion: operator.openshift.io/v1
kind: IngressController
metadata:
  name: sharded
  namespace: openshift-ingress-operator
spec:
  domain: test.apps.ocp.pebcac.org
  endpointPublishingStrategy:
    type: NodePortService
  nodePlacement:
    nodeSelector:
      matchLabels:
        node-role.kubernetes.io/worker: ""
  routeSelector:
    matchLabels:
      type: sharded
status: {}
