# Deployment for instance 1
apiVersion: apps/v1
kind: Deployment
metadata:
  name: go-web-app-instance1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: go-web-app1
      version: instance1
  template:
    metadata:
      labels:
        type: sharded
        app: go-web-app1
        version: instance1
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - go-web-app1
            topologyKey: "kubernetes.io/hostname"
      serviceAccountName: "go-web-app-sa"
      containers:
            - name: go-web-app1
              image: docker.io/pebcac/ocwebsvc:0.5
              ports:
              - containerPort: 8080
              env:
                - name: NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
                - name: HOSTNAME
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.name
                - name: NODE_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: spec.nodeName
                - name: POD_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.name
              resources:
                limits:
                  cpu: "1"
                  memory: "1Gi"
                requests:
                  cpu: "0.5"
                  memory: "512Mi"
                livenessProbe:
                  httpGet:
                    path: /health
                    port: 8080
                readinessProbe:
                  httpGet:
                    path: /ready
                    port: 8080


---
# Service for instance 1
apiVersion: v1
kind: Service
metadata:
  name: gowebapp1
  labels:
    type: sharded
    app: go-web-app1
spec:
  selector:
    app: go-web-app1
    version: instance1
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080

---
# Deployment for instance 2
apiVersion: apps/v1
kind: Deployment
metadata:
  name: go-web-app-instance2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: go-web-app2
      version: instance2
  template:
    metadata:
      labels:
        type: sharded
        app: go-web-app2
        version: instance2
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - go-web-app2
            topologyKey: "kubernetes.io/hostname"
      serviceAccountName: "go-web-app-sa"
      containers:
            - name: go-web-app2
              image: docker.io/pebcac/ocwebsvc:0.5
              ports:
              - containerPort: 8080
              env:
                - name: NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
                - name: HOSTNAME
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.name
                - name: NODE_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: spec.nodeName
                - name: POD_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.name
              resources:
                limits:
                  cpu: "1"
                  memory: "1Gi"
                requests:
                  cpu: "0.5"
                  memory: "512Mi"
                livenessProbe: 
                  httpGet:
                    path: /health
                    port: 8080 
                readinessProbe: 
                  httpGet:
                    path: /ready
                    port: 8080

---
#Service for instance 2
apiVersion: v1
kind: Service
metadata:
  name: gowebapp2
  labels:
    type: sharded
    app: go-web-app2
spec:
  selector:
    app: go-web-app2
    version: instance2
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080

---
apiVersion: operator.openshift.io/v1
kind: IngressController
metadata:
  name: sharded
  namespace: openshift-ingress-operator
spec:
  domain: test.apps.ocp.pebcac.org
  routeSelector:
    matchLabels:
      type: sharded
status: {}

---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  labels:
    type: sharded
  name: lb50
  namespace: test
spec:
  alternateBackends:
  - kind: Service
    name: gowebapp2
    weight: 50
  host: lb50-test.apps.ocp.pebcac.org
  port:
    targetPort: 8080
  to:
    kind: Service
    name: gowebapp1
    weight: 50
  wildcardPolicy: None